# -*- coding: UTF-8 -*-
import bpy


# Here, the CALSSB and Mainb are just to apply the register_class function format. There is nothing else. The bl_name copy from the A file, etc. It is to solve the following error:
# RuntimeError: register_class(...):, missing bl_rna attribute from 'type' instance (may not be registered)
class classB():

    def mainB():
        
        ## 除 All objects in the world
        # bpy.ops.object.select_all(action='SELECT')
        # bpy.ops.object.delete(use_global=False, confirm=False)

        # Alignment positions and rotation of cursor positions
        bpy.ops.view3d.snap_cursor_to_center()

        # View cut end point is set to 20000M
        # reference：https://blender.stackexchange.com/questions/265858/
        screens = (s for w in bpy.data.workspaces for s in w.screens)
        V3Dareas = (a for s in screens for a in s.areas if a.type=='VIEW_3D')
        V3Dspaces = (s for a in V3Dareas for s in a.spaces if s.type=='VIEW_3D')
        for space in V3Dspaces:
            space.clip_end = 20000

        """
        File structure: 
         【Collection】 Scene collection
            ┕[Raise] Collect
                ┕ (User's own original Stuffs)
            ┕[Collection] spas (everything generated by plug -in is here)
                ┕[Assemble] starexample.1
                    ┕【Blinds】 Starexample.1
                ┕[Assemble] starexample.2
                    ┕【Blinds】 Starexample.2
                ......
                ┕【gather】starExample.9
                    ┕【Aprillae】 StarExample.9

                （Here）
                ┕【Example Collection】 Starexample.10
                    ┕【Example Collection】 Starexample.11
                ......
                ┕[Example Collection] Starexample.n+9 (N Number of Stars entered by users)
        """

        #New collection, renamed SPAS, and move from the Blender background file to the view layer file
        # reference：https://blender.stackexchange.com/questions/184363/
        createCollection = bpy.data.collections.new('SPAS')
        bpy.context.scene.collection.children.link(createCollection)
        # Set SPAS collection as activity items
        bpy.context.view_layer.active_layer_collection = bpy.context.view_layer.layer_collection.children['SPAS']

        # Create nine edges and corner balls, each placed in a collection, each gives different spontaneous optical materials for subsequent instantiated sub -objects
        for i in range(1,10):
            
            # Create a new collection, rename it (the name and the name of the Chinese objects are the same), and move from the Blender background file to the view layer file 
            # Reference: https://blener.stackexchange.com/questions/184363/
            createCollection = bpy.data.collections.new("starExample." + str(i))
            bpy.context.scene.collection.children.link(createCollection)

            # 0.25 angled kicks, move to a position of 20000m outside the origin 
             ############################################## This ############################################## This ################### 
            
             #The reason is that these nine standard stars, as "instantiated" sub -objects, should have been hidden after the creation ("Eyeball" icon in Blender, not the "Monitor" icon) 
             # However, until version 3.6, there is still no API instruction that supports this operation. 
             # Blener's API native support "disable selection (Pointer icon)", "disable display (monitor icon)", "disable rendee icon" "" "" 
             # But there is no instruction about "temporarily hidden display (Eyeball icon)", correspondingly, the Hotkey H key does not correspond to the API 
             # In Blender3.2, you can also set up hiding through the "bpy.context.active_Object.hide = TRUE", but this instruction is not supported by the native API " 
             # So we have to choose to move these nine standard stars to places where the view cannot be seen. Since we have set the rendering end of 20000m, it will move to 20000m outside the origin. 
             # But these standard stars that comes with +X direction 20000m offset, the generated instances will also have offset 
             # In order to avoid this, you need to set the instance of the case level starexample.x settings with the same+x 20000M of the case of Starexample.x. shift 
             # -Instancing, the API is bpy.data.collection

            bpy.ops.mesh.primitive_ico_sphere_add(subdivisions=2, radius=0.25,location=(20000,0,0))
           # Renamed newly generated edges and corners, renamed (the number 1-5-9 in the name 1-5-9 corresponding to the blue-white-red)
            bpy.context.object.name = "starExample." + str(i)
            
            # Create new materials, renamed it
            newMat=bpy.data.materials.new(name='material.' + str(i))    # Create a new material reference called {'material.' + Str (i)}：https://juejin.cn/post/7167268956770664456
            newMat.use_nodes = True                                     #New materials will use nodes
            newMat.node_tree.nodes.get("Principled BSDF")               # Set the value of the node, the new material uses principle BSDF node reference：https://blender.stackexchange.com/questions/160042/
            # Adjust the spontaneous light strength to 20
            bpy.data.materials['material.' + str(i)].node_tree.nodes["Principled BSDF"].inputs[20].default_value = 20
            #Adjust the color of self -glow (explained later)
            bpy.data.materials['material.' + str(i)].node_tree.nodes["Principled BSDF"].inputs[19].default_value = (0.25+0.05*i, min(0.25+0.05*i,0.75-0.05*i), 0.75-0.05*i, 1)
            # Apply the new material to the activity object (that is, the newly built edges and corners)
            bpy.context.active_object.data.materials.append(newMat)
            # Put the activity object into the collection of the specified name：https://blender.stackexchange.com/questions/132112/
            bpy.data.collections["starExample." + str(i)].objects.link(bpy.context.active_object) 
            # Set the instance offset of the setting of the example level +x 20000M
            bpy.data.collections["starExample." + str(i)].instance_offset[0] = 20000

# In order to save the workload, this project only judges the color of the star according to the category of the spectrum, and the sorting from high to low according to the temperature is (w) Obafgk (s) m (w is the wolf-rayet star). 
             # Color is realized by adjusting (R, G, B, A), and the redd ones are increased, and the blue is increased. A is the default degree of the opaque degree to 1; In the between, you may wish to make R+B = 1, so 
             # But pink will appear when the proportion of the two is close, which is not right, so you need some green; just try it in the Blender that the total value of G and B is a small value in R and B, which is a very simple. The good -looking approach makes red and blue transition with white instead of pink, which is more in line with the real situation 
             # 避免星星蓝/红得太离谱，R和B的值都以0.5为基准上下0.2浮动，即最红的material.9是(0.7,0.3,0.3)，最蓝的material.1是(0.3, 0.3,0.7) 
            
             # For newly created objects, disable views on the view layer (instead of global) show, refer 
             # bpy.context.active_object.hide = true 

             # Disable the selection function of nine standard stars so that it cannot be selected at the step of "all objects" under the D file, so as not to participate in the spinning of the sky, maintain (20000,0,0) coordinates and x = 20000 Example offset 
             # Otherwise, the standard star will rotate with the celebrity, and the coordinate changes, but the system still uses x = 20000 correction offset, which will cause the entire celestial sphere to run off
            bpy.context.active_object.hide_select = True

            # And disable rendering, reference：https://devtalk.blender.org/t/still-able-to-hide-objects-with-python/5418
            # bpy.context.object.hide_render = True
            # Can't prohibit rendering ... Otherwise, what is instantaneous will be prohibited from rendering

        # Set the SPAS collection as the activity item again, ready to put the instantiated content in
        bpy.context.view_layer.active_layer_collection = bpy.context.view_layer.layer_collection.children['SPAS']

        # Use CyCles renderer, GPU to calculate rendering
        bpy.context.scene.render.engine = 'CYCLES'
        bpy.context.scene.cycles.device = 'GPU'

        print('Prepared the world.')

# def register():
#     from bpy.utils import register_class
#     register_class(classB)

# def unregister():
#     from bpy.utils import unregister_class
#     unregister_class(classB)
